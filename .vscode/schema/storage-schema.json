{
    "title": "StorageConfig",
    "description": "---------------------------------------------------------------------------------\nContains configuration parameters for the data storage API used in tsdat pipelines.\n\nThis class will ultimately be converted into a tsdat.io.base.Storage subclass for\nuse in tsdat pipelines.\n\nProvides methods to support yaml parsing and validation, including the generation of\njson schema for immediate validation. This class also provides a method to\ninstantiate a tsdat.io.base.Storage subclass from a parsed configuration file.\n\nArgs:\n    classname (str): The dotted module path to the storage class that the specified\n        configurations should apply to. To use the built-in FileSystem storage\n        class, for example, you would set 'tsdat.io.storage.FileSystem' as the\n        classname.\n    handler (DataHandlerConfig): Config class that should be used for data I/O\n        within the storage area.\n\n---------------------------------------------------------------------------------",
    "type": "object",
    "properties": {
        "classname": {
            "title": "Classname",
            "description": "The import path to the Python class that should be used, e.g., if your import statement looks like `from foo.bar import Baz`, then your classname would be `foo.bar.Baz`.",
            "type": "string"
        },
        "parameters": {
            "title": "Parameters",
            "description": "Optional dictionary that will be passed to the Python class specified by 'classname' when it is instantiated. If the object is a tsdat class, then the parameters will typically be made accessible under the `params` property on an instance of the class. See the documentation for individual classes for more information.",
            "default": {},
            "type": "object"
        },
        "handler": {
            "title": "Output Data Handler",
            "description": "Register a DataHandler for the Storage class to use for reading from and writing to the storage area. For most users, the default DataHandler ('tsdat.io.handlers.NetCDFHandler') is sufficient. Tsdat strongly encourages using the default NetCDFHandler because it is the most well-supported format offered out-of-the-box. Other formats are provided, and custom formats can also be added to extend the default functionality of tsdat. Note that some Storage classes may not support certain DataHandlers (e.g., Storage classes targeted at Databases may not support file-based DataHandlers).",
            "default": {
                "classname": "tsdat.io.handlers.NetCDFHandler",
                "parameters": {}
            },
            "allOf": [
                {
                    "$ref": "#/definitions/DataHandlerConfig"
                }
            ]
        }
    },
    "required": [
        "classname"
    ],
    "additionalProperties": false,
    "definitions": {
        "DataHandlerConfig": {
            "title": "DataHandlerConfig",
            "type": "object",
            "properties": {
                "classname": {
                    "title": "Classname",
                    "description": "The import path to the Python class that should be used, e.g., if your import statement looks like `from foo.bar import Baz`, then your classname would be `foo.bar.Baz`.",
                    "type": "string"
                },
                "parameters": {
                    "title": "Parameters",
                    "description": "Optional dictionary that will be passed to the Python class specified by 'classname' when it is instantiated. If the object is a tsdat class, then the parameters will typically be made accessible under the `params` property on an instance of the class. See the documentation for individual classes for more information.",
                    "default": {},
                    "type": "object"
                }
            },
            "required": [
                "classname"
            ],
            "additionalProperties": false
        }
    }
}